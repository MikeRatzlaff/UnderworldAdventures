#
# mingw32 makefile for Underworld Adventures
#
# $Id$
#

#
# user-configurable stuff
#

# path to place where uwadv should be installed
UWADV_PATH = c:/uwadv

# set to "yes" for console or "no" to have stdout.txt/stderr.txt
# for releases, always use "no"
WITH_CONSOLE = no

# set to "yes" to have some debugging features
# for releases, always use "no"
WITH_DEBUGGING = no

# path to mingw compiler
MINGW_PATH = c:/mingw

# set to "yes" if you have STLport (and modify STLPORT_PATH then)
WITH_STLPORT = yes

# path to where STLport was installed and built
STLPORT_PATH = c:/mingw/stlport

# set to "yes" if you have wxWindows
WITH_WXWINDOWS = no

# path to wxWindows base dir (only needed for uadebug.dll)
WXWIN_PATH = d:/projekte/wxMSW


# change these values only if you have a non-standard mingw32 setup
# (i.e. when the uwadv-mingw32-source-setup-?.zip wasn't used)

# path to SDL include
SDL_INCLUDE = -I$(MINGW_PATH)/include/sdl/


# no servicable parts beyond here.
# -------------------------------------------------------------------

#
# build variables
#

# compiler
CC = gcc
CXX = c++
AR = ar
CFLAGS =
CXXFLAGS =
LDFLAGS = -mwindows -s
DEFINES = 

# debug options
ifeq ("$(WITH_DEBUGGING)", "yes")
 CFLAGS = -g -O #-Wall
 DEFINES += -DHAVE_DEBUG
else
 CFLAGS = -O2
endif

# library configure stuff
SDL_LIB = -lSDLmain -lSDL -lSDL_mixer
WIN32_LIB = -lmingw32 -lkernel32 -luser32
OPENGL_LIB = -lopengl32 -lglu32

uwadv_SDL_LIB = -lSDL -lSDL_mixer

# SDL console output
ifeq ("$(WITH_CONSOLE)", "yes")
 DEFINES += -DHAVE_CONSOLE
else
 uwadv_SDL_LIB = -lSDLmain -lSDL -lSDL_mixer
endif

# STLport
ifeq ("$(WITH_STLPORT)", "yes")
 STLPORT_INCLUDE = -I$(STLPORT_PATH)/stlport/
 STLPORT_LIB = -L$(STLPORT_PATH)/lib/ -lstlport_mingw32_static
else
 STLPORT_INCLUDE =
 STLPORT_LIB =
endif

INCLUDES = $(SDL_INCLUDE) $(STLPORT_INCLUDE) $(FMOD_INCLUDE) \
	-Isource/ -Isource/lua/include/ -Isource/resource/zziplib/

# wxWindows
ifeq ("$(WITH_WXWINDOWS)", "yes")
 INCLUDES += -I$(WXWIN_PATH)/include/ -I$(WXWIN_PATH)/contrib/include/ -I$(WXWIN_PATH)/lib/mswd/
 DEFINES += -D__GNUWIN32__ -D__WXMSW__ -D_X86_=1 -DWIN32 -D_WIN32 -DWINVER=0x0400
 WXWIN_LIB = -L$(WXWIN_PATH)/lib/ -L$(WXWIN_PATH)/contrib/lib/ \
	-lwxmsw -lfl -lole32 -loleaut32 -luuid \
	-lcomctl32 -lwsock32
	# -lwinspool -lcomdlg32 -ladvapi32 -lshell32 \
	# -lodbc32 -lodbccp32 -lrpcrt4.lib
	# -lzlib -lpng -ljpeg -ltiff -lregex
else
 WXWIN_LIB =
endif


CFLAGS += $(DEFINES) $(INCLUDES)

#
# build targets
#


all: uwadv tools data


# lua objects

include source/lua/Makefile.common

lua_Cs = \
        $(filter %.c,$(liblua_la_SOURCES)) \
        $(filter %.c,$(liblualib_la_SOURCES))
lua_OBJS = $(lua_Cs:%.c=source/lua/%.o)



lua: $(lua_OBJS)


# zziplib objects

zziplib_OBJS = source/resource/zziplib/SDL_rwops_zzip.o \
	source/resource/zziplib/zzip-dir.o \
	source/resource/zziplib/zzip-err.o \
	source/resource/zziplib/zzip-file.o \
	source/resource/zziplib/zzip-info.o \
	source/resource/zziplib/zzip-io.o \
	source/resource/zziplib/zzip-stat.o \
	source/resource/zziplib/zzip-zip.o

zziplib: $(zziplib_OBJS)


# underworld adventures

uwadv_EXEC = uwadv.exe

include source/Makefile.common

uwadv_win32objects = \
	source/win32/main.o \
	source/win32/game_win32.o \
	source/win32/uwadv_res.o \
	source/win32/debug.o \
	source/audio/midi_driver/win_midiout.o

uwadv_CPPs = $(filter %.cpp,$(uwadv_SOURCES))
uwadv_Cs = $(filter %.c,$(uwadv_SOURCES))
uwadv_OBJS = $(uwadv_CPPs:%.cpp=source/%.o) \
	$(uwadv_Cs:%.c=source/%.o) \
        $(uwadv_win32objects) \
	$(lua_OBJS) $(zziplib_OBJS)

uwadv_LIBS = $(WIN32_LIB) -lwinmm $(OPENGL_LIB) \
	$(uwadv_SDL_LIB) $(FMOD_LIB) $(STLPORT_LIB) -lz


ifeq ("$(WITH_CONSOLE)", "yes")
uwadv_LDFLAGS = -mconsole
else
uwadv_LDFLAGS =
endif


# underworld adventures debugger

uadebug_EXEC = uadebug.dll

include source/debug/Makefile.common

uadebug_CPPs = $(filter %.cpp,$(libuadebug_la_SOURCES))
uadebug_OBJS = $(uadebug_CPPs:%.cpp=source/debug/%.o)

uadebug_LIBS = $(WXWIN_LIB) $(WIN32_LIB) $(STLPORT_LIB)
uadebug_LDFLAGS =


# ua config program

uaconfig_EXEC = uaconfig.exe

uaconfig_OBJS = source/win32/uaconfig/uaconfig.o \
	source/win32/uaconfig/uaconfig_res.o \
	source/settings.o source/resource/cfgfile.o \
	source/utils.o

uaconfig_LIBS = $(WIN32_LIB) $(SDL_LIB) -lwinmm $(STLPORT_LIB)



# tools

include source/tools/Makefile.common

# tools library

libuatools_EXT = libuatools.a

libuatools_CPPs = $(filter %.cpp,$(libuatools_la_SOURCES))
libuatools_OBJS = $(libuatools_CPPs:%.cpp=source/tools/%.o)


# conv debugger

cnvdbg_EXEC = cnvdbg.exe

cnvdbg_CPPs = $(filter %.cpp,$(cnvdbg_SOURCES))
cnvdbg_OBJS = $(cnvdbg_CPPs:%.cpp=source/tools/%.o)

cnvdbg_LDFLAGS = -mconsole
cnvdbg_LIBS = -lmingw32 -lkernel32 -luser32 libuatools.a \
	$(SDL_LIB) $(STLPORT_LIB) -lz


# conv decompiler

cnvdasm_EXEC = cnvdasm.exe

cnvdasm_CPPs = $(filter %.cpp,$(cnvdasm_SOURCES))
cnvdasm_OBJS = $(cnvdasm_CPPs:%.cpp=source/tools/%.o)

cnvdasm_LDFLAGS = -mconsole
cnvdasm_LIBS = -lmingw32 -lkernel32 -luser32 libuatools.a \
	$(SDL_LIB) $(STLPORT_LIB) -lz


# xmidi to midi converter

xmi2mid_EXEC = xmi2mid.exe

xmi2mid_CPPs = $(filter %.cpp,$(xmi2mid_SOURCES))
xmi2mid_OBJS = $(xmi2mid_CPPs:%.cpp=source/tools/%.o)

xmi2mid_LDFLAGS = -mconsole
xmi2mid_LIBS = -lmingw32 -lkernel32 -luser32 $(SDL_LIB)


# map display

mapdisp_EXEC = mapdisp.exe

mapdisp_CPPs = $(filter %.cpp,$(mapdisp_SOURCES))
mapdisp_OBJS = $(mapdisp_CPPs:%.cpp=source/tools/%.o)

mapdisp_LDFLAGS =
mapdisp_LIBS = -lmingw32 -lkernel32 -luser32 libuatools.a \
	$(SDL_LIB) $(STLPORT_LIB) $(OPENGL_LIB) -lz


# animation viewer

animview_EXEC = animview.exe

animview_CPPs = $(filter %.cpp,$(animview_SOURCES))
animview_OBJS = $(animview_CPPs:%.cpp=source/tools/%.o)

animview_LDFLAGS =
animview_LIBS = -lmingw32 -lkernel32 -luser32 libuatools.a \
	$(SDL_LIB) $(STLPORT_LIB) $(OPENGL_LIB)


# string pack/unpack tool

strpak_EXEC = strpak.exe

strpak_CPPs = $(filter %.cpp,$(strpak_SOURCES))
strpak_OBJS = $(strpak_CPPs:%.cpp=source/tools/%.o)

strpak_LDFLAGS = -mconsole
strpak_LIBS = -lmingw32 -lkernel32 -luser32 libuatools.a $(SDL_LIB) $(STLPORT_LIB) \


#
# build rules
#

tools: libuatools cnvdbg cnvdasm xmi2mid mapdisp animview strpak

uwadv: $(uwadv_EXEC) uwadv.cfg
$(uwadv_EXEC): $(uwadv_OBJS)
	$(CXX) $(LDFLAGS) $(uwadv_LDFLAGS) -o $(@) $(uwadv_OBJS) $(uwadv_LIBS)

uwadv.cfg: win32/uwadv.cfg
	cp win32/uwadv.cfg .


ifeq ("$(WITH_WXWINDOWS)", "yes")

uadebug: $(uadebug_EXEC)

$(uadebug_EXEC): $(uadebug_OBJS)
	$(CXX) $(LDFLAGS) $(uadebug_LDFLAGS) -o $(@) $(uadebug_OBJS) $(uadebug_LIBS)

else
uadebug:
	@echo.
	@echo "to build uadebug.dll, you need to compile wxWindows with mingw32"
	@echo "then enable the wxWindows options in Makefile.mingw and try again."
	@echo "more infos are available in the file docs/README.mingw32.txt"
endif

uaconfig: $(uaconfig_EXEC)
$(uaconfig_EXEC): $(uaconfig_OBJS)
	$(CXX) $(LDFLAGS) $(uaconfig_LDFLAGS) -o $(@) $(uaconfig_OBJS) $(uaconfig_LIBS)


libuatools: $(libuatools_EXT)
$(libuatools_EXT): $(libuatools_OBJS)
	$(AR) r $(libuatools_EXT) $(libuatools_OBJS)

cnvdbg: $(cnvdbg_EXEC)
$(cnvdbg_EXEC): libuatools $(cnvdbg_OBJS)
	$(CXX) $(LDFLAGS) $(cnvdbg_LDFLAGS) -o $(@) $(cnvdbg_OBJS) $(cnvdbg_LIBS)


cnvdasm: $(cnvdasm_EXEC)
$(cnvdasm_EXEC): libuatools $(cnvdasm_OBJS)
	$(CXX) $(LDFLAGS) $(cnvdasm_LDFLAGS) -o $(@) $(cnvdasm_OBJS) $(cnvdasm_LIBS)


xmi2mid: $(xmi2mid_EXEC)
$(xmi2mid_EXEC): $(xmi2mid_OBJS)
	$(CXX) $(LDFLAGS) $(xmi2mid_LDFLAGS) -o $(@) $(xmi2mid_OBJS) $(xmi2mid_LIBS)


mapdisp: $(mapdisp_EXEC)
$(mapdisp_EXEC): libuatools $(mapdisp_OBJS)
	$(CXX) $(LDFLAGS) $(mapdisp_LDFLAGS) -o $(@) $(mapdisp_OBJS) $(mapdisp_LIBS)


animview: $(animview_EXEC)
$(animview_EXEC): libuatools $(animview_OBJS)
	$(CXX) $(LDFLAGS) $(animview_LDFLAGS) -o $(@) $(animview_OBJS) $(animview_LIBS)


strpak: $(strpak_EXEC)
$(strpak_EXEC): libuatools $(strpak_OBJS)
	$(CXX) $(LDFLAGS) $(strpak_LDFLAGS) -o $(@) $(strpak_OBJS) $(strpak_LIBS)


#
# general build rules
#

include uadata/Makefile.common
uadata_uarFILES = $(uarFILES:%=uadata/%)

data: uadata/uadata00.uar

uadata/uadata00.uar: $(uadata_uarFILES)
	cd uadata; zip uadata00.uar $(uarFILES)

data-clean:
	cd uadata; rm -f $(luaOBJECTS) uadata00.uar

luac:
	cd source/lua/src/luac && make

luac-clean:
	cd source/lua/src/luac && make clean


update: uwadv data uaconfig
	strip $(uwadv_EXEC)
	strip $(uaconfig_EXEC)
	mkdir -p $(UWADV_PATH)
	cp $(uwadv_EXEC) $(UWADV_PATH)
	cp $(uaconfig_EXEC) $(UWADV_PATH)
	mkdir -p $(UWADV_PATH)/uadata/
	cp uadata/uadata00.uar $(UWADV_PATH)/uadata/

install: update
	cp uwadv.cfg $(UWADV_PATH)
	cp uadata/uw1/keymap.cfg $(UWADV_PATH)

installer: install
	cp win32/uwadv.nsi $(UWADV_PATH)
	cp docs/License.installer.txt $(UWADV_PATH)
	cp Copying $(UWADV_PATH)
	cp docs/README.uwadv.txt $(UWADV_PATH)
	cp docs/uw1-keyboard.txt $(UWADV_PATH)
	cp docs/Changes $(UWADV_PATH)/Changes.txt
	cp docs/Authors.txt $(UWADV_PATH)
	cd $(UWADV_PATH) && ./upx -9 uwadv.exe
	cd $(UWADV_PATH) && ./upx -9 uaconfig.exe
	cd $(UWADV_PATH) && ./makensis.exe uwadv.nsi

clean: data-clean luac-clean
	rm -f $(uwadv_EXEC) $(cnvdbg_EXEC) $(cnvdasm_EXEC) $(xmi2mid_EXEC) \
		$(mapdisp_EXEC) $(animview_EXEC) $(strpak_EXEC) \
		$(uaconfig_EXEC) $(libuatools_EXT) \
		$(uwadv_OBJS) $(cnvdbg_OBJS) $(cnvdasm_OBJS) $(xmi2mid_OBJS) \
		$(mapdisp_OBJS) $(animview_OBJS) $(strpak_OBJS) \
		$(uaconfig_OBJS) $(libuatools_OBJS)


#
# compile rules
#

%.o: %.c
	$(CC) $(CFLAGS) -c $(<) -o $*.o

%.o: %.cpp
	$(CXX) $(CFLAGS) $(CXXFLAGS) -c $(<) -o $*.o

%.o: %.rc
	windres -i $(<) -o $*.o --output-format=coff --include-dir=$(@D)

%.lob: %.lua luac
	source/lua/bin/luac -o $@ $<
