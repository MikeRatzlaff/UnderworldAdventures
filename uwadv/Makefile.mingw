#
# Underworld Adventures - an Ultima Underworld hacking project
# Copyright (c) 2002,2003,2004 Underworld Adventures Team
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
# mingw32 makefile for Underworld Adventures
#
# $Id$
#

# -------------------------------------------------------------------
# user-configurable stuff
# -------------------------------------------------------------------

# path to place where uwadv should be installed
UWADV_PATH = c:/uwadv

# set to "yes" for console or "no" to have stdout.txt/stderr.txt
# for releases, always use "no"
WITH_CONSOLE = no

# set to "yes" to have some debugging features
# for releases, always use "no"
WITH_DEBUGGING = no

# path to mingw compiler
MINGW_PATH = c:/mingw

# version stored in installer
UWADV_VERSION = 0.9-test3

# -------------------------------------------------------------------
# STLport configuration
# -------------------------------------------------------------------

# set to "yes" if you have STLport (and modify STLPORT_PATH then)
WITH_STLPORT = yes

# path to where STLport was installed and built
STLPORT_PATH = c:/mingw/stlport

# -------------------------------------------------------------------
# wxWidgets configuration
# -------------------------------------------------------------------

# set to "yes" if you have wxWidgets
WITH_WXWIDGETS = yes

# path to wxWidgets base dir (only needed for uadebug.dll)
WXWIN_PATH = d:/projekte/wxMSW

# -------------------------------------------------------------------
# docbook configuration
# -------------------------------------------------------------------

# set to "yes if you have docbook-xsl installed somewhere
WITH_DOCBOOK_XSL = yes

# base path to docbook-xsl package
# note: for some reason xsltproc doesn't like all slashes in the path
DOCBOOK_XSL_BASEPATH = d:\\uwadv/docbook/docbook-xsl-1.64.0

# xsl-transformation processor to use
# choose either "xsltproc" or "msxsl" and configure paths below
XSLT_PROCESSOR = xsltproc

# path and filename for the xsltproc utility
XSLTPROC_PATH = d:/uwadv/docbook/xsltproc.exe

# path and filename for the msxsl utility
MSXSL_PATH = d:/uwadv/docbook/msxsl.exe

# -------------------------------------------------------------------
# configuration details
# -------------------------------------------------------------------

# change this value only if you have a non-standard mingw32 setup
# (i.e. when the uwadv-mingw32-source-setup-?.zip wasn't used)

# path to SDL include
SDL_INCLUDE = -I$(MINGW_PATH)/include/sdl/


# no servicable parts beyond here.
# -------------------------------------------------------------------
# -------------------------------------------------------------------

#
# build variables
#

# compiler
CC = gcc
CXX = c++
AR = ar
CFLAGS =
CXXFLAGS =
LDFLAGS = -mwindows -s
DEFINES = 

# debug options
ifeq ("$(WITH_DEBUGGING)", "yes")
 CFLAGS = -g -O #-Wall
 DEFINES += -DHAVE_DEBUG
else
 CFLAGS = -O2
endif

# library configure stuff
SDL_LIB = -lSDLmain -lSDL -lSDL_mixer
WIN32_LIB = -lmingw32 -lkernel32 -luser32
OPENGL_LIB = -lopengl32 -lglu32

uwadv_SDL_LIB = -lSDL -lSDL_mixer

# SDL console output
ifeq ("$(WITH_CONSOLE)", "yes")
 DEFINES += -DHAVE_CONSOLE
else
 uwadv_SDL_LIB = -lSDLmain -lSDL -lSDL_mixer
endif

# STLport
ifeq ("$(WITH_STLPORT)", "yes")
 STLPORT_INCLUDE = -I$(STLPORT_PATH)/stlport/
 STLPORT_LIB = -L$(STLPORT_PATH)/lib/
 ifeq ("$(WITH_DEBUGGING)", "yes")
  DEFINES += -D_STLP_DEBUG -D_STLP_USE_STATIC_LIB
  #-D_STLP_DEBUG_ALLOC -D_STLP_USE_SYSTEM_ASSERT
  #-D_STLP_USE_NEWALLOC 
  STLPORT_LIB += -lstlport_mingw32_stldebug_static
 else
  STLPORT_LIB += -lstlport_mingw32_static
 endif
else
 STLPORT_INCLUDE =
 STLPORT_LIB =
endif

INCLUDES = $(SDL_INCLUDE) $(STLPORT_INCLUDE) $(FMOD_INCLUDE) \
	-Isource/ -Isource/audio -Isource/base -Isource/import \
	-Isource/renderer -Isource/script -Isource/ui -Isource/underw \
	-Isource/script/lua/include/ -Isource/base/zziplib/

# wxWidgets
ifeq ("$(WITH_WXWIDGETS)", "yes")
 INCLUDES += -I$(WXWIN_PATH)/include/ -I$(WXWIN_PATH)/contrib/include/ -I$(WXWIN_PATH)/lib/mswd/
 DEFINES += -D__GNUWIN32__ -D__WXMSW__ -D_X86_=1 -DWIN32 -D_WIN32 -DWINVER=0x0400
 WXWIN_LIB = -L$(WXWIN_PATH)/lib/ -L$(WXWIN_PATH)/contrib/lib/ \
	-lwxmsw -lfl -lole32 -loleaut32 -luuid \
	-lcomctl32 -lwsock32
	# -lwinspool -lcomdlg32 -ladvapi32 -lshell32 \
	# -lodbc32 -lodbccp32 -lrpcrt4.lib
	# -lzlib -lpng -ljpeg -ltiff -lregex
else
 WXWIN_LIB =
endif


CFLAGS += $(DEFINES) $(INCLUDES)

# -------------------------------------------------------------------
# build targets
# -------------------------------------------------------------------


all: uwadv tools data manual


# lua objects

include source/script/lua/Makefile.common

liblua_EXT = liblua.a

liblua_Cs = \
	$(filter %.c,$(liblua_la_SOURCES)) \
	$(filter %.c,$(liblualib_la_SOURCES))
liblua_OBJS = $(liblua_Cs:%.c=source/script/lua/%.o)


# zziplib objects

include source/base/zziplib/Makefile.common

libzziplib_EXT = libzziplib.a

libzziplib_Cs = $(filter %.c,$(libzzip_la_SOURCES))
libzziplib_OBJS = $(libzziplib_Cs:%.c=source/base/zziplib/%.o)


# underworld adventures

include source/Makefile.common

uwadv_EXEC = uwadv.exe

uwadv_win32objects = \
	source/win32/game_win32.o \
	source/win32/uwadv_res.o \
	source/win32/debug_impl.o

uwadv_CPPs = $(filter %.cpp,$(uwadv_SOURCES))
uwadv_Cs = $(filter %.c,$(uwadv_SOURCES))
uwadv_OBJS = $(uwadv_CPPs:%.cpp=source/%.o) \
	$(uwadv_Cs:%.c=source/%.o) \
	$(uwadv_win32objects)

uwadv_LIBS = $(WIN32_LIB) -lwinmm $(OPENGL_LIB) \
	-L. -lzziplib -llua \
	$(uwadv_SDL_LIB) $(FMOD_LIB) $(STLPORT_LIB) -lz


ifeq ("$(WITH_CONSOLE)", "yes")
uwadv_LDFLAGS = -mconsole
else
uwadv_LDFLAGS =
endif


# underworld adventures debugger

uadebug_EXEC = uadebug.dll

include source/debug/Makefile.common

uadebug_CPPs = $(filter %.cpp,$(libuadebug_la_SOURCES))
uadebug_OBJS = $(uadebug_CPPs:%.cpp=source/debug/%.o)

uadebug_LIBS = $(WXWIN_LIB) $(WIN32_LIB) $(STLPORT_LIB)
uadebug_LDFLAGS =


# ua config program

uaconfig_EXEC = uaconfig.exe

uaconfig_OBJS = \
	source/win32/uaconfig/uaconfig.o \
	source/win32/uaconfig/uaconfig_res.o \
	source/base/cfgfile.o \
	source/base/settings.o \
	source/base/utils.o

uaconfig_LIBS = $(WIN32_LIB) $(SDL_LIB) -lwinmm $(STLPORT_LIB)



# tools

include source/tools/Makefile.common

# tools library

libuatools_EXT = libuatools.a

libuatools_CPPs = $(filter %.cpp,$(libuatools_la_SOURCES))
libuatools_OBJS = $(libuatools_CPPs:%.cpp=source/tools/%.o)


# conv debugger

cnvdbg_EXEC = cnvdbg.exe

cnvdbg_CPPs = $(filter %.cpp,$(cnvdbg_SOURCES))
cnvdbg_OBJS = $(cnvdbg_CPPs:%.cpp=source/tools/%.o)

cnvdbg_LDFLAGS = -mconsole
cnvdbg_LIBS = -lmingw32 -lkernel32 -luser32 libuatools.a \
	$(SDL_LIB) $(STLPORT_LIB) -lz


# conv decompiler

cnvdasm_EXEC = cnvdasm.exe

cnvdasm_CPPs = $(filter %.cpp,$(cnvdasm_SOURCES))
cnvdasm_OBJS = $(cnvdasm_CPPs:%.cpp=source/tools/%.o)

cnvdasm_LDFLAGS = -mconsole
cnvdasm_LIBS = -lmingw32 -lkernel32 -luser32 libuatools.a \
	$(SDL_LIB) $(STLPORT_LIB) -lz


# xmidi to midi converter

xmi2mid_EXEC = xmi2mid.exe

xmi2mid_CPPs = $(filter %.cpp,$(xmi2mid_SOURCES))
xmi2mid_OBJS = $(xmi2mid_CPPs:%.cpp=source/tools/%.o)

xmi2mid_LDFLAGS = -mconsole
xmi2mid_LIBS = -lmingw32 -lkernel32 -luser32 $(SDL_LIB)


# map display

mapdisp_EXEC = mapdisp.exe

mapdisp_CPPs = $(filter %.cpp,$(mapdisp_SOURCES))
mapdisp_OBJS = $(mapdisp_CPPs:%.cpp=source/tools/%.o)

mapdisp_LDFLAGS =
mapdisp_LIBS = -lmingw32 -lkernel32 -luser32 libuatools.a \
	$(SDL_LIB) $(STLPORT_LIB) $(OPENGL_LIB) -lz


# animation viewer

animview_EXEC = animview.exe

animview_CPPs = $(filter %.cpp,$(animview_SOURCES))
animview_OBJS = $(animview_CPPs:%.cpp=source/tools/%.o)

animview_LDFLAGS =
animview_LIBS = -lmingw32 -lkernel32 -luser32 libuatools.a \
	$(SDL_LIB) $(STLPORT_LIB) $(OPENGL_LIB)


# string pack/unpack tool

strpak_EXEC = strpak.exe

strpak_CPPs = $(filter %.cpp,$(strpak_SOURCES))
strpak_OBJS = $(strpak_CPPs:%.cpp=source/tools/%.o)

strpak_LDFLAGS = -mconsole
strpak_LIBS = -lmingw32 -lkernel32 -luser32 libuatools.a $(SDL_LIB) $(STLPORT_LIB)


# uw dump tool

include source/tools/uwdump/Makefile.common

uwdump_EXEC = uwdump.exe

uwdump_CPPs = $(filter %.cpp,$(uwdump_SOURCES))
uwdump_OBJS = $(uwdump_CPPs:%.cpp=source/tools/uwdump/%.o)

uwdump_LDFLAGS = -mconsole
uwdump_LIBS = -lmingw32 -lkernel32 -luser32 libuatools.a \
	$(SDL_LIB) $(STLPORT_LIB)


# uw model view tool

uwmdlview_EXEC = uwmdlview.exe
uwmdlview_CPPs = $(filter %.cpp,$(uwmdlview_SOURCES))
uwmdlview_OBJS = $(uwmdlview_CPPs:%.cpp=source/tools/%.o)

uwmdlview_LDFLAGS = -mconsole
uwmdlview_LIBS = -lmingw32 -lkernel32 -luser32 libuatools.a \
	$(SDL_LIB) $(STLPORT_LIB) $(OPENGL_LIB) -lz


# manuals

ifeq ("$(WITH_DOCBOOK_XSL)", "yes")

manual_SOURCES = docs/docbook/uwadv-manual.xml docs/docbook/uadebug-manual.xml
manual_TARGETS = $(manual_SOURCES:%.xml=%.html)

endif




# -------------------------------------------------------------------
# build rules
# -------------------------------------------------------------------

TOOLS = cnvdbg cnvdasm xmi2mid mapdisp animview strpak uwdump uwmdlview

tools: libuatools $(TOOLS)

uwadv: $(uwadv_EXEC) uwadv.cfg
$(uwadv_EXEC): $(uwadv_OBJS) $(liblua_EXT) $(libzziplib_EXT)
	$(CXX) $(LDFLAGS) $(uwadv_LDFLAGS) -o $(@) $(uwadv_OBJS) $(uwadv_LIBS)

uwadv.cfg: win32/uwadv.cfg
	cp win32/uwadv.cfg .


ifeq ("$(WITH_WXWIDGETS)", "yes")

uadebug: $(uadebug_EXEC)

$(uadebug_EXEC): $(uadebug_OBJS)
	$(CXX) $(LDFLAGS) $(uadebug_LDFLAGS) -o $(@) $(uadebug_OBJS) $(uadebug_LIBS)

else
uadebug:
	@echo.
	@echo "To build uadebug.dll, you need to compile wxWidgets with mingw32"
	@echo "Then enable the wxWidgets options in Makefile.mingw and try again."
	@echo "More infos are available in the file docs/README.mingw32.txt"
endif

uaconfig: $(uaconfig_EXEC)
$(uaconfig_EXEC): $(uaconfig_OBJS)
	$(CXX) $(LDFLAGS) $(uaconfig_LDFLAGS) -o $(@) $(uaconfig_OBJS) $(uaconfig_LIBS)


lua: liblua
liblua: $(liblua_EXT)
$(liblua_EXT): $(liblua_OBJS)
	$(AR) r $(liblua_EXT) $(liblua_OBJS)

zziplib: libzziplib
libzziplib: $(libzziplib_EXT)
$(libzziplib_EXT): $(libzziplib_OBJS)
	$(AR) r $(libzziplib_EXT) $(libzziplib_OBJS)

libuatools: $(libuatools_EXT)
$(libuatools_EXT): $(libuatools_OBJS)
	$(AR) r $(libuatools_EXT) $(libuatools_OBJS)

cnvdbg: $(cnvdbg_EXEC)
$(cnvdbg_EXEC): libuatools $(cnvdbg_OBJS)
	$(CXX) $(LDFLAGS) $(cnvdbg_LDFLAGS) -o $(@) $(cnvdbg_OBJS) $(cnvdbg_LIBS)


cnvdasm: $(cnvdasm_EXEC)
$(cnvdasm_EXEC): libuatools $(cnvdasm_OBJS)
	$(CXX) $(LDFLAGS) $(cnvdasm_LDFLAGS) -o $(@) $(cnvdasm_OBJS) $(cnvdasm_LIBS)


xmi2mid: $(xmi2mid_EXEC)
$(xmi2mid_EXEC): $(xmi2mid_OBJS)
	$(CXX) $(LDFLAGS) $(xmi2mid_LDFLAGS) -o $(@) $(xmi2mid_OBJS) $(xmi2mid_LIBS)


mapdisp: $(mapdisp_EXEC)
$(mapdisp_EXEC): libuatools $(mapdisp_OBJS)
	$(CXX) $(LDFLAGS) $(mapdisp_LDFLAGS) -o $(@) $(mapdisp_OBJS) $(mapdisp_LIBS)


animview: $(animview_EXEC)
$(animview_EXEC): libuatools $(animview_OBJS)
	$(CXX) $(LDFLAGS) $(animview_LDFLAGS) -o $(@) $(animview_OBJS) $(animview_LIBS)


strpak: $(strpak_EXEC)
$(strpak_EXEC): libuatools $(strpak_OBJS)
	$(CXX) $(LDFLAGS) $(strpak_LDFLAGS) -o $(@) $(strpak_OBJS) $(strpak_LIBS)


uwdump: $(uwdump_EXEC)
$(uwdump_EXEC): libuatools $(uwdump_OBJS)
	$(CXX) $(LDFLAGS) $(uwdump_LDFLAGS) -o $(@) $(uwdump_OBJS) $(uwdump_LIBS)

uwmdlview: $(uwmdlview_EXEC)
$(uwmdlview_EXEC): libuatools $(uwmdlview_OBJS)
	$(CXX) $(LDFLAGS) $(uwmdlview_LDFLAGS) -o $(@) $(uwmdlview_OBJS) $(uwmdlview_LIBS)



# -------------------------------------------------------------------
# general build rules
# -------------------------------------------------------------------

include uadata/Makefile.common
uadata_uarFILES = $(uarFILES:%=uadata/%)

data: uadata/uadata00.uar

uadata/uadata00.uar: $(uadata_uarFILES)
	cd uadata; zip uadata00.uar $(uarFILES)

data-clean:
	cd uadata; rm -f $(luaOBJECTS) uadata00.uar

manual: $(manual_TARGETS)

manual-clean:
	rm -f $(manual_TARGETS)

luac:
	cd source/script/lua/src/luac && make

luac-clean:
	cd source/script/lua/src/luac && make clean

update: uwadv data uaconfig manual
	strip $(uwadv_EXEC)
	strip $(uaconfig_EXEC)
	mkdir -p $(UWADV_PATH)
	cp $(uwadv_EXEC) $(UWADV_PATH)
	cp $(uaconfig_EXEC) $(UWADV_PATH)
	mkdir -p $(UWADV_PATH)/uadata/
	cp uadata/uadata00.uar $(UWADV_PATH)/uadata/

install: update
	cp uwadv.cfg $(UWADV_PATH)
	cp uadata/uw1/keymap.cfg $(UWADV_PATH)

toolsinstall: tools
	mkdir -p $(UWADV_PATH)/tools/
	cp $(TOOLS) $(UWADV_PATH)/tools/
	cp docs/README.tools.txt $(UWADV_PATH)/tools/

installer: install
	cp win32/uwadv.nsi $(UWADV_PATH)
	cp docs/License.installer.txt $(UWADV_PATH)
	cp Copying $(UWADV_PATH)
	cp docs/README.uwadv.txt $(UWADV_PATH)
	cp $(manual_TARGETS) $(UWADV_PATH)
	cp docs/uw1-keyboard.txt $(UWADV_PATH)
	cp docs/Changes $(UWADV_PATH)/Changes.txt
	cp docs/Authors.txt $(UWADV_PATH)
	cd $(UWADV_PATH) && ./upx -9 uwadv.exe
	cd $(UWADV_PATH) && ./upx -9 uaconfig.exe
	cd $(UWADV_PATH) && ./makensis.exe //DVERSION="$(UWADV_VERSION)" uwadv.nsi

clean: data-clean luac-clean manual-clean
	rm -f $(uwadv_EXEC) $(cnvdbg_EXEC) $(cnvdasm_EXEC) $(xmi2mid_EXEC) \
		$(mapdisp_EXEC) $(animview_EXEC) $(strpak_EXEC) \
		$(uaconfig_EXEC) $(libuatools_EXT) $(uwdump_EXEC) \
		$(uwmdlview_EXEC) $(liblua_EXT) $(libzziplib_EXT) \
		$(uwadv_OBJS) $(cnvdbg_OBJS) $(cnvdasm_OBJS) $(xmi2mid_OBJS) \
		$(mapdisp_OBJS) $(animview_OBJS) $(strpak_OBJS) \
		$(uaconfig_OBJS) $(libuatools_OBJS) $(uwdump_OBJS) \
		$(uwmdlview_OBJS) $(liblua_OBJS) $(libzziplib_OBJS)


# -------------------------------------------------------------------
# compile rules
# -------------------------------------------------------------------

%.o: %.c
	$(CC) $(CFLAGS) -c $(<) -o $*.o

%.o: %.cpp
	$(CXX) $(CFLAGS) $(CXXFLAGS) -c $(<) -o $*.o

%.o: %.rc
	windres -i $(<) -o $*.o --output-format=coff --include-dir=$(@D)

%.lob: %.lua luac
	source/script/lua/bin/luac -o $@ $<


ifeq ("$(WITH_DOCBOOK_XSL)", "yes")

 ifeq ("$(XSLT_PROCESSOR)", "xsltproc")

docs/docbook/%.html: docs/docbook/%.xml
	$(XSLTPROC_PATH) --nonet $(DOCBOOK_XSL_BASEPATH)/html/docbook.xsl docs/docbook/$*.xml > $@

 else
  ifeq ("$(XSLT_PROCESSOR)", "msxsl")

docs/docbook/%.html: docs/docbook/%.xml
	$(MSXSL_PATH) docs/docbook/$*.xml $(DOCBOOK_XSL_BASEPATH)/html/docbook.xsl -xe -o $@
  endif
 endif
endif

# -------------------------------------------------------------------
